{
  "swagger" : "2.0",
  "info" : {
    "description" : "https://www.beanstream.com/api/v1",
    "version" : "1.0.2",
    "title" : "Beanstream Payments API"
  },
  "host" : "www.beanstream.com",
  "basePath" : "/api/v1",
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/payments" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Make Payment",
        "description" : "Make a payment using credit card, cash, cheque, profile, or token. Each payment type has its own json definition passed in the body. For all payments you have the standard Billing, Shipping, Comments, etc. fields that are optional. Only the amount is required along with the payment data for card, cash, cheque, profile, and token. You must change the payment_method for each payment type. Credit Card - \"card\", Payment Profile - \"payment_profile\", Legato Token - \"token\", Cash - \"cash\", Cheque - \"cheque\", Interac - \"interac\"",
        "operationId" : "makePayment",
        "parameters" : [ {
          "in" : "body",
          "name" : "payment_request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PaymentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment response containing the payment details as well as if the payment was approved or declined.",
            "schema" : {
              "$ref" : "#/definitions/PaymentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/payments/{transId}" : {
      "get" : {
        "tags" : [ "Payments" ],
        "summary" : "Get payment",
        "description" : "Get a previous payment (transaction).",
        "operationId" : "getPayment",
        "parameters" : [ {
          "name" : "transId",
          "in" : "path",
          "description" : "The transaction id.",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "A transaction object.",
            "schema" : {
              "$ref" : "#/definitions/Transaction"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/payments/{transId}/completions" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Complete pre-auth",
        "description" : "Complete a pre-authorized payment. The amount of the transaction to complete must be less than or equal to the original pre-auth amount. Complete must be set to true.",
        "operationId" : "completePayment",
        "parameters" : [ {
          "name" : "transId",
          "in" : "path",
          "description" : "The transaction id.",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "in" : "body",
          "name" : "payment_request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PaymentRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment response containing the payment details as well as if the transaction was approved or declined.",
            "schema" : {
              "$ref" : "#/definitions/PaymentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/payments/{transId}/returns" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Return payment",
        "description" : "Return payment.",
        "operationId" : "returnPayment",
        "parameters" : [ {
          "name" : "transId",
          "in" : "path",
          "description" : "The transaction id.",
          "required" : true,
          "type" : "number",
          "format" : "double"
        }, {
          "in" : "body",
          "name" : "return",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Return"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment response containing the payment details as well as if the transaction was approved or declined.",
            "schema" : {
              "$ref" : "#/definitions/PaymentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/payments/{transId}/void" : {
      "post" : {
        "tags" : [ "Payments" ],
        "summary" : "Void Transaction",
        "description" : "Void a transaction. You can void payments, returns, pre-auths, and completions. It will cancel that transaction.",
        "operationId" : "voidPayment",
        "parameters" : [ {
          "name" : "transId",
          "in" : "path",
          "description" : "The transaction id to void.",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "void",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Void"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Payment response containing the payment details as well as if the transaction was approved or declined.",
            "schema" : {
              "$ref" : "#/definitions/PaymentResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/profiles" : {
      "post" : {
        "tags" : [ "Profiles" ],
        "summary" : "Create Profile",
        "description" : "Create a new Payment Profile using either a card or a Legato token. You must supply one of them.",
        "operationId" : "createProfile",
        "parameters" : [ {
          "in" : "body",
          "name" : "createProfileBody",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CreateProfileBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/profiles/{profileId}" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Get profile",
        "description" : "Get a Payment Profile using the profile ID, also known as the Customer Code.",
        "operationId" : "getProfile",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/PaymentProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Profiles" ],
        "summary" : "Update Profile",
        "description" : "Create a new Payment Profile using either a card or a Legato token. You must supply one of them.",
        "operationId" : "updateProfile",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "updateProfileBody",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateProfileBody"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Profiles" ],
        "summary" : "Delete profile",
        "description" : "Delete a Payment Profile using the profile ID, also known as the Customer Code.",
        "operationId" : "deleteProfile",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/profiles/{profileId}/cards" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Get cards",
        "description" : "Get all of the cards on the profile.",
        "operationId" : "getAllCards",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileGetCards"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "Profiles" ],
        "summary" : "Add card",
        "description" : "Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.",
        "operationId" : "addCard",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "card",
          "description" : "The card that will be added to the profile.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProfileCard"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/profiles/{profileId}/cards/{cardId}" : {
      "get" : {
        "tags" : [ "Profiles" ],
        "summary" : "Get card",
        "description" : "Get the details of a card on the profile.",
        "operationId" : "getCard",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cardId",
          "in" : "path",
          "description" : "The card id.",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileCardResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "put" : {
        "tags" : [ "Profiles" ],
        "summary" : "Update card",
        "description" : "Update the details of a card on the profile.",
        "operationId" : "updateCard",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cardId",
          "in" : "path",
          "description" : "The card id.",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        }, {
          "in" : "body",
          "name" : "card",
          "description" : "The card that will be updated on the profile.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ProfileCard"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "Profiles" ],
        "summary" : "Delete card",
        "description" : "Delete a card on the profile.",
        "operationId" : "deleteCard",
        "parameters" : [ {
          "name" : "profileId",
          "in" : "path",
          "description" : "The profile id. (aka CustomerCode)",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cardId",
          "in" : "path",
          "description" : "The card id.",
          "required" : true,
          "type" : "number",
          "format" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "The Profile.",
            "schema" : {
              "$ref" : "#/definitions/ProfileResponse"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/reports" : {
      "post" : {
        "tags" : [ "Reporting" ],
        "summary" : "Search Query",
        "description" : "Query for transactions using a date range and optional search criteria. This method allows you to page your search results if you are expecting a lot of results to be returned. The page start value begins at 1. If no records are found the API will return a 404 error message. For details on the parameters and allowed values for Criteria please visit the documentation http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/",
        "operationId" : "getReport",
        "parameters" : [ {
          "in" : "body",
          "name" : "search_query",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/SearchQuery"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A transaction object.",
            "schema" : {
              "$ref" : "#/definitions/SearchResult"
            }
          },
          "400" : {
            "description" : "Bad Request",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "401" : {
            "description" : "Authentication Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "402" : {
            "description" : "Business Rule Violation or Decline",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "403" : {
            "description" : "Authorization Failure",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "405" : {
            "description" : "Invalid Request Method",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "schema" : {
              "$ref" : "#/definitions/BeanstreamException"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    },
    "/scripts/tokenization/tokens" : {
      "post" : {
        "tags" : [ "Tokenization" ],
        "summary" : "Tokenize credit card",
        "description" : "NOTE that the full URL for this API call is https://www.beanstream.com/scripts/tokenization/tokens. Turn a credit card into a token using this service. This helps lessen your PCI scope by not passing the credit card information to your server. Instead you turn the card number into a token in the client app, then send the token to the server. When you send the token to Beanstream to make a payment, Beanstream then looks up the card number from that token and makes the payment. Tokens can also be used to create payment profiles.",
        "operationId" : "tokenizeCard",
        "parameters" : [ {
          "in" : "body",
          "name" : "token_request",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TokenRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Token response object. One will always be returned even if the data or card was invalid. The validity of the card is not checked with this API call.",
            "schema" : {
              "$ref" : "#/definitions/TokenResponse"
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      }
    }
  },
  "securityDefinitions" : {
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "PaymentRequest" : {
      "required" : [ "amount", "payment_method" ],
      "properties" : {
        "order_number" : {
          "type" : "string",
          "description" : "A unique order number.",
          "maxLength" : 30
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "description" : "A decimal value in dollars, or relevant currency."
        },
        "payment_method" : {
          "type" : "string",
          "description" : "The desired method of payment.",
          "enum" : [ "card", "token", "payment_profile", "cash", "cheque", "apple_pay" ]
        },
        "language" : {
          "type" : "string",
          "description" : "characters",
          "maxLength" : 3
        },
        "customer_ip" : {
          "type" : "string",
          "description" : "alphanumeric",
          "maxLength" : 30
        },
        "term_url" : {
          "type" : "string",
          "description" : "alphanumeric",
          "maxLength" : 256
        },
        "comments" : {
          "type" : "string",
          "description" : "alphanumeric",
          "maxLength" : 256
        },
        "billing" : {
          "description" : "The billing address",
          "$ref" : "#/definitions/Address"
        },
        "shipping" : {
          "description" : "The shipping address",
          "$ref" : "#/definitions/Address"
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        },
        "card" : {
          "description" : "Payment with a credit card. The payment_method must be 'card'",
          "$ref" : "#/definitions/Card"
        },
        "payment_profile" : {
          "description" : "Payment with a Payment Profile. The payment_method must be 'payment_profile'",
          "$ref" : "#/definitions/ProfilePurchase"
        },
        "token" : {
          "description" : "Payment with a Legato token. The payment_method must be 'token'",
          "$ref" : "#/definitions/TokenPurchase"
        },
        "recurring_payment" : {
          "type" : "boolean",
          "description" : "A recurring transaction is a transaction where a cardholder had provided permission to a merchant to \nperiodically charge his/her account number for recurring goods or services. The recurring payment \nindicator may be set for credit card based pre-auth, capture and purchase transactions.\n"
        },
        "level2" : {
          "description" : "Level 2 processing is for B2B customers. Additional information can be provided, to the benefit of corporate/government/industrial customers, that includes a customer code & tax amounts.",
          "$ref" : "#/definitions/Level2"
        }
      }
    },
    "Card" : {
      "required" : [ "expiry_month", "expiry_year", "name", "number" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "description" : "Credit card number (PAN).",
          "maxLength" : 20,
          "default" : "5100000010001004"
        },
        "name" : {
          "type" : "string",
          "description" : "Card holder name.",
          "maxLength" : 64
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 15 for 2015.",
          "maxLength" : 2,
          "default" : "18"
        },
        "cvd" : {
          "type" : "string",
          "description" : "Security code on the back of the credit card. This can be set to mandatory in the back office.",
          "minLength" : 3,
          "maxLength" : 4,
          "default" : "123"
        },
        "complete" : {
          "type" : "boolean",
          "description" : "set to false for Pre-Authorize, and true to complete a payment",
          "default" : true
        },
        "is_accord_d" : {
          "type" : "boolean",
          "description" : "required flag for desjardin visa cards that want to make Accord D financing transactions. Accord D transactions require billing information as well",
          "default" : false
        },
        "accord_d" : {
          "description" : "Desjardin Visa Only - required for a complete Accord D financing transaction",
          "$ref" : "#/definitions/AccordD"
        },
        "apple_pay" : {
          "description" : "Apple Pay Only - required when attempting to process apple_pay transactions",
          "$ref" : "#/definitions/ApplePay"
        }
      }
    },
    "AccordD" : {
      "required" : [ "financing_type", "grace_period", "plan_number", "term" ],
      "properties" : {
        "financing_type" : {
          "type" : "string",
          "description" : "Deferred(D) or Equal(E) payment",
          "maxLength" : 1,
          "default" : "E",
          "enum" : [ "D", "E" ]
        },
        "plan_number" : {
          "type" : "string",
          "description" : "Must be a value between 000 - ZZZ",
          "maxLength" : 3
        },
        "grace_period" : {
          "type" : "integer",
          "description" : "Must be 0 if financing_type is not a deferred payment"
        },
        "term" : {
          "type" : "integer",
          "description" : "Number of months. Must be 00 is financing_type is not a deferred payment"
        }
      }
    },
    "ApplePay" : {
      "required" : [ "apple_pay_merchant_id", "payment_token" ],
      "properties" : {
        "apple_pay_merchant_id" : {
          "type" : "string",
          "description" : "The Apple Pay merchant ID."
        },
        "payment_token" : {
          "type" : "string",
          "description" : "The encrypted token provided by Apple Pay."
        },
        "complete" : {
          "type" : "boolean",
          "description" : "set to false for Pre-Authorize, and true to complete a payment",
          "default" : true
        }
      }
    },
    "ProfilePurchase" : {
      "required" : [ "card_id", "customer_code" ],
      "properties" : {
        "complete" : {
          "type" : "boolean",
          "description" : "Set to FALSE for pre-auth. digit(1) or boolean"
        },
        "customer_code" : {
          "type" : "string",
          "description" : "The payment profile ID.",
          "maxLength" : 32
        },
        "card_id" : {
          "type" : "integer",
          "description" : "Which credit card to use. Starts at 1 for the first card. You must configure how many cards can be stored by visiting the profile options in the back office."
        }
      }
    },
    "TokenPurchase" : {
      "required" : [ "code", "name" ],
      "properties" : {
        "complete" : {
          "type" : "boolean",
          "description" : "Set to FALSE for pre-auth"
        },
        "code" : {
          "type" : "string",
          "description" : "the payment token you retrieved from the Legato service.",
          "maxLength" : 36
        },
        "name" : {
          "type" : "string",
          "description" : "Card holder name.",
          "maxLength" : 64
        }
      }
    },
    "Address" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of the person/business",
          "maxLength" : 64
        },
        "address_line1" : {
          "type" : "string",
          "description" : "Street address",
          "maxLength" : 64
        },
        "address_line2" : {
          "type" : "string",
          "description" : "Additional address information(eg; suite number, apartment number, etc)",
          "maxLength" : 64
        },
        "city" : {
          "type" : "string",
          "description" : "The city",
          "maxLength" : 32
        },
        "province" : {
          "type" : "string",
          "description" : "characters (2)"
        },
        "country" : {
          "type" : "string",
          "description" : "Valid ISO 3166-1 country code",
          "maxLength" : 2,
          "enum" : [ "AD", "AE", "AF", "AG", "AI", "AL", "AM", "AO", "AQ", "AR", "AS", "AT", "AU", "AW", "AX", "AZ", "BA", "BB", "BD", "BE", "BF", "BG", "BH", "BI", "BJ", "BL", "BM", "BN", "BO", "BQ", "BR", "BS", "BT", "BV", "BW", "BY", "BZ", "CA", "CC", "CD", "CF", "CG", "CH", "CI", "CK", "CL", "CM", "CN", "CO", "CR", "CU", "CV", "CW", "CX", "CY", "CZ", "DE", "DJ", "DK", "DM", "DO", "DZ", "EC", "EE", "EG", "EH", "ER", "ES", "ET", "FI", "FJ", "FK", "FM", "FO", "FR", "GA", "GB", "GD", "GE", "GF", "GG", "GH", "GI", "GL", "GM", "GN", "GP", "GQ", "GR", "GS", "GT", "GU", "GW", "GY", "HK", "HM", "HN", "HR", "HT", "HU", "ID", "IE", "IL", "IM", "IN", "IO", "IQ", "IR", "IS", "IT", "JE", "JM", "JO", "JP", "KE", "KG", "KH", "KI", "KM", "KN", "KP", "KR", "KW", "KY", "KZ", "LA", "LB", "LC", "LI", "LK", "LR", "LS", "LT", "LU", "LV", "LY", "MA", "MC", "MD", "ME", "MF", "MG", "MH", "MK", "ML", "MM", "MN", "MO", "MP", "MQ", "MR", "MS", "MT", "MU", "MV", "MW", "MX", "MY", "MZ", "NA", "NC", "NE", "NF", "NG", "NI", "NL", "NO", "NP", "NR", "NU", "NZ", "OM", "PA", "PE", "PF", "PG", "PH", "PK", "PL", "PM", "PN", "PR", "PS", "PT", "PW", "PY", "QA", "RE", "RO", "RS", "RU", "RW", "SA", "SB", "SC", "SD", "SE", "SG", "SH", "SI", "SJ", "SK", "SL", "SM", "SN", "SO", "SR", "SS", "ST", "SV", "SX", "SY", "SZ", "TC", "TD", "TF", "TG", "TH", "TJ", "TK", "TL", "TM", "TN", "TO", "TR", "TT", "TV", "TW", "TZ", "UA", "UG", "UM", "US", "UY", "UZ", "VA", "VC", "VE", "VG", "VI", "VN", "VU", "WF", "WS", "YE", "YT", "ZA", "ZM", "ZW" ]
        },
        "postal_code" : {
          "type" : "string",
          "description" : "Postal/Zip code",
          "maxLength" : 16
        },
        "phone_number" : {
          "type" : "string",
          "description" : "Phone number",
          "pattern" : "^\\d{1,20}$"
        },
        "email_address" : {
          "type" : "string",
          "description" : "Email Address",
          "maxLength" : 32
        }
      }
    },
    "Custom" : {
      "properties" : {
        "ref1" : {
          "type" : "string",
          "description" : "custom reference field 1",
          "maxLength" : 256
        },
        "ref2" : {
          "type" : "string",
          "description" : "custom reference field 2",
          "maxLength" : 256
        },
        "ref3" : {
          "type" : "string",
          "description" : "custom reference field 3",
          "maxLength" : 256
        },
        "ref4" : {
          "type" : "string",
          "description" : "custom reference field 4",
          "maxLength" : 256
        },
        "ref5" : {
          "type" : "string",
          "description" : "custom reference field 5",
          "maxLength" : 256
        }
      }
    },
    "PaymentResponse" : {
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "transaction Id",
          "maxLength" : 9
        },
        "approved" : {
          "type" : "integer",
          "description" : "Approval status of payment transaction"
        },
        "message_id" : {
          "type" : "integer",
          "description" : "Beanstream response code"
        },
        "message" : {
          "type" : "string",
          "description" : "Message containing information about the transactions status",
          "maxLength" : 256
        },
        "auth_code" : {
          "type" : "string",
          "description" : "Auth Code",
          "maxLength" : 32
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time stamp of when the transaction occurred"
        },
        "order_number" : {
          "type" : "string",
          "description" : "Order number",
          "maxLength" : 32,
          "default" : "Transaction Id"
        },
        "type" : {
          "type" : "string",
          "description" : "Payment transaction type",
          "maxLength" : 16,
          "enum" : [ "P", "R", "VP", "VR", "PA", "PAC" ]
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "description" : "A decimal value in dollars, or relevant currency."
        },
        "payment_method" : {
          "type" : "string",
          "description" : "Payment method",
          "enum" : [ "card", "token", "payment_profile", "cash", "cheque", "apple_pay" ]
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        },
        "card" : {
          "$ref" : "#/definitions/CardPurchaseResponse"
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "CardPurchaseResponse" : {
      "properties" : {
        "card_type" : {
          "type" : "string",
          "description" : "The type of card used in the transaction. AM = American Express, DI = Diners, JB = JCB, MC = MasterCard, NN = Discover, VI = Visa",
          "maxLength" : 2,
          "enum" : [ "AM", "DI", "JB", "MC", "NN'VI" ]
        },
        "last_four" : {
          "type" : "string",
          "description" : "The last 4 digits of the credit card used in the transaction",
          "maxLength" : 4
        },
        "cvd_result" : {
          "$ref" : "#/definitions/CvdResult"
        },
        "address_match" : {
          "type" : "integer",
          "description" : "Result of Address verification. 0 if Adddress Verification Service(AVS) is disabled or AVS fails. 1 if AVS is enabled and address and postal/zip code match"
        },
        "postal_result" : {
          "type" : "integer",
          "description" : "Result of postal verification. 0 if the postal_code parameter does does not match the customers address records or if AVS was not processed for the transaction. 1 if the postal_code parameter matches the consumers address records at the issuing bank."
        }
      }
    },
    "CardGetTransactionResponse" : {
      "properties" : {
        "card_type" : {
          "type" : "string",
          "description" : "The type of card used in the transaction. AM = American Express, DI = Diners, JB = JCB, MC = MasterCard, NN = Discover, VI = Visa",
          "maxLength" : 2,
          "enum" : [ "AM", "DI", "JB", "MC", "NN'VI" ]
        },
        "last_four" : {
          "type" : "string",
          "description" : "The last 4 digits of the credit card used in the transaction",
          "maxLength" : 4
        },
        "cvd_result" : {
          "$ref" : "#/definitions/CvdResult"
        },
        "address_match" : {
          "type" : "integer",
          "description" : "Result of Address verification. 0 if Adddress Verification Service(AVS) is disabled or AVS fails. 1 if AVS is enabled and address and postal/zip code match"
        },
        "avs_result" : {
          "type" : "integer",
          "description" : "characters (1)"
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "a 2 digit representation of the expiry month. For example March is 03.",
          "maxLength" : 2
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "a 2 digit representation of the expiry year. For example 2016 is 16.",
          "maxLength" : 2
        }
      }
    },
    "Link" : {
      "properties" : {
        "ref" : {
          "type" : "string",
          "description" : "Eg. \"void\" or \"return\"",
          "pattern" : "^[a-zA-z]{1,16}$"
        },
        "href" : {
          "type" : "string",
          "description" : "Url to perform the void, return, completion etc.",
          "maxLength" : 256
        },
        "method" : {
          "type" : "string",
          "description" : "Http method. post, put, get etc.",
          "pattern" : "^[a-zA-z]{1,16}$"
        }
      }
    },
    "Return" : {
      "required" : [ "amount" ],
      "properties" : {
        "order_number" : {
          "type" : "string",
          "description" : "A unique order number.",
          "maxLength" : 30
        },
        "amount" : {
          "type" : "number",
          "format" : "double",
          "description" : "The amount of the transaction to return. Must be less than or equal to the original purchase amount."
        }
      }
    },
    "Void" : {
      "required" : [ "amount" ],
      "properties" : {
        "amount" : {
          "type" : "number",
          "format" : "double",
          "description" : "The amount of the transaction to void. Must be equal to the original purchase amount. You can void purchases as well as pre-auths and returns. The amount you are voiding has to match the amount of that transaction."
        },
        "order_number" : {
          "type" : "string",
          "description" : "A unique order number.",
          "maxLength" : 30
        }
      }
    },
    "Transaction" : {
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "integer"
        },
        "approved" : {
          "type" : "boolean"
        },
        "message_id" : {
          "type" : "number",
          "format" : "integer"
        },
        "message" : {
          "type" : "string"
        },
        "auth_code" : {
          "type" : "string"
        },
        "created" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "Time stamp of when the transaction occurred"
        },
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "order_number" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "comments" : {
          "type" : "string"
        },
        "batch_number" : {
          "type" : "string"
        },
        "total_refunds" : {
          "type" : "number",
          "format" : "double"
        },
        "total_completions" : {
          "type" : "number",
          "format" : "double"
        },
        "payment_method" : {
          "type" : "string"
        },
        "card" : {
          "$ref" : "#/definitions/CardGetTransactionResponse"
        },
        "billing" : {
          "$ref" : "#/definitions/Address"
        },
        "shipping" : {
          "$ref" : "#/definitions/Address"
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        },
        "adjusted_by" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Adjustment"
          }
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Link"
          }
        }
      }
    },
    "Adjustment" : {
      "properties" : {
        "id" : {
          "type" : "number",
          "format" : "integer"
        },
        "type" : {
          "type" : "string"
        },
        "approval" : {
          "type" : "number",
          "format" : "integer"
        },
        "message" : {
          "type" : "string"
        },
        "amount" : {
          "type" : "number",
          "format" : "double"
        },
        "created" : {
          "type" : "string",
          "description" : "The date it was created '2015-04-22T10:03:19.323-07:00'"
        },
        "url" : {
          "type" : "string"
        }
      }
    },
    "SearchQuery" : {
      "required" : [ "end_date", "end_row", "name", "start_date", "start_row" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Can be either 'Search' for all fields or 'TransHistoryMinimal' for a subset of the fields returned in the results.",
          "enum" : [ "Search", "TransHistoryMinimal" ]
        },
        "start_date" : {
          "type" : "string",
          "description" : "The start date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account."
        },
        "end_date" : {
          "type" : "string",
          "description" : "The end date (inclusive) '2015-04-22T10:03:19' in the timezone of your merchant account."
        },
        "start_row" : {
          "type" : "number",
          "format" : "integer",
          "description" : "Used to page the results. 1-based"
        },
        "end_row" : {
          "type" : "number",
          "format" : "integer",
          "description" : "Used to page the results. 1-based. This should always be 1 larger than start_row."
        },
        "criteria" : {
          "type" : "array",
          "description" : "Optional search criteria. All criteria are ANDed together.",
          "items" : {
            "$ref" : "#/definitions/Criteria"
          }
        }
      }
    },
    "Criteria" : {
      "properties" : {
        "field" : {
          "type" : "number",
          "format" : "integer",
          "description" : "Refer to the table on this page for the searchable fields http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/"
        },
        "operator" : {
          "type" : "string",
          "description" : "URL encoded comparators such as less than, greater than, equals... Refer to the table on this page for the full list of comparators http://developer.beanstream.com/documentation/analyze-payments/search-specific-criteria/",
          "enum" : [ "%3D", "%3C", "%3E", "%3C%3D", "%3E%3D", "START%20WITH" ]
        },
        "value" : {
          "type" : "string",
          "description" : "The value you want to match against."
        }
      }
    },
    "SearchResult" : {
      "properties" : {
        "records" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SearchRecord"
          }
        }
      }
    },
    "SearchRecord" : {
      "properties" : {
        "row_id" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_id" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_date_time" : {
          "type" : "string",
          "description" : "2015-04-22T10:03:19.323-07:00"
        },
        "trn_type" : {
          "type" : "string"
        },
        "trn_order_number" : {
          "type" : "string"
        },
        "trn_payment_method" : {
          "type" : "string"
        },
        "trn_masked_card" : {
          "type" : "string",
          "description" : "The credit card with the middle digits redacted with X's"
        },
        "trn_amount" : {
          "type" : "number",
          "format" : "float32"
        },
        "trn_returns" : {
          "type" : "number",
          "format" : "float32"
        },
        "trn_completions" : {
          "type" : "number",
          "format" : "float32"
        },
        "trn_voided" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_response" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_card_type" : {
          "type" : "string",
          "description" : "MC VI etc"
        },
        "trn_batch_no" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_avs_result" : {
          "type" : "string",
          "description" : "Address Verification Service"
        },
        "trn_cvd_result" : {
          "type" : "number",
          "format" : "integer"
        },
        "trn_card_expiry" : {
          "type" : "string"
        },
        "message_id" : {
          "type" : "number",
          "format" : "integer"
        },
        "message_text" : {
          "type" : "string"
        },
        "trn_card_owner" : {
          "type" : "string"
        },
        "trn_ip" : {
          "type" : "string"
        },
        "trn_approval_code" : {
          "type" : "string"
        },
        "trn_reference" : {
          "type" : "number",
          "format" : "integer"
        },
        "b_name" : {
          "type" : "string"
        },
        "b_email" : {
          "type" : "string"
        },
        "b_phone" : {
          "type" : "string"
        },
        "b_address1" : {
          "type" : "string"
        },
        "b_address2" : {
          "type" : "string"
        },
        "b_city" : {
          "type" : "string"
        },
        "b_province" : {
          "type" : "string"
        },
        "b_postal" : {
          "type" : "string"
        },
        "b_country" : {
          "type" : "string"
        },
        "s_name" : {
          "type" : "string"
        },
        "s_email" : {
          "type" : "string"
        },
        "s_phone" : {
          "type" : "string"
        },
        "s_address1" : {
          "type" : "string"
        },
        "s_address2" : {
          "type" : "string"
        },
        "s_city" : {
          "type" : "string"
        },
        "s_province" : {
          "type" : "string"
        },
        "s_postal" : {
          "type" : "string"
        },
        "s_country" : {
          "type" : "string"
        },
        "ref1" : {
          "type" : "string"
        },
        "ref2" : {
          "type" : "string"
        },
        "ref3" : {
          "type" : "string"
        },
        "ref4" : {
          "type" : "string"
        },
        "ref5" : {
          "type" : "string"
        },
        "product_name" : {
          "type" : "string"
        },
        "product_id" : {
          "type" : "string"
        },
        "customer_code" : {
          "type" : "string",
          "description" : "The Payment Profile ID used in this transaction, if appropriate."
        }
      }
    },
    "PaymentProfileResponse" : {
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "Code"
        },
        "message" : {
          "type" : "string",
          "description" : "Message containing contextual information about the response",
          "maxLength" : 64
        },
        "customer_code" : {
          "type" : "string",
          "description" : "Unique payment profile ID",
          "maxLength" : 32
        },
        "status" : {
          "type" : "string",
          "description" : "characters(1)"
        },
        "last_transaction" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "date and time of last transaction"
        },
        "modified_date" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "date and time the profile was last modified"
        },
        "language" : {
          "type" : "string",
          "description" : "Language",
          "maxLength" : 3
        },
        "velocity_group" : {
          "type" : "string"
        },
        "profile_group" : {
          "type" : "string"
        },
        "account_ref" : {
          "type" : "string"
        },
        "card" : {
          "$ref" : "#/definitions/GetProfileDefaultCard"
        },
        "billing" : {
          "$ref" : "#/definitions/Address"
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        }
      }
    },
    "GetProfileDefaultCard" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "cardholder name",
          "maxLength" : 64
        },
        "number" : {
          "type" : "string",
          "description" : "masked credit card number",
          "maxLength" : 20
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 17 for 2017.",
          "maxLength" : 2,
          "default" : "17"
        },
        "card_type" : {
          "type" : "string",
          "description" : "The type of card associated with the profile. AM = American Express, DI = Diners, JB = JCB, MC = MasterCard, NN = Discover, VI = Visa",
          "maxLength" : 2,
          "enum" : [ "AM", "DI", "JB", "MC", "NN'VI" ]
        }
      }
    },
    "ProfileCard" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "cardholder name.",
          "maxLength" : 64
        },
        "number" : {
          "type" : "string",
          "description" : "Credit card number.",
          "maxLength" : 20
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 17 for 2017.",
          "maxLength" : 2,
          "default" : "17"
        }
      }
    },
    "ProfileGetCards" : {
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "integer",
          "description" : "code"
        },
        "message" : {
          "type" : "string",
          "description" : "Message containing details of the request status",
          "maxLength" : 64
        },
        "customer_code" : {
          "type" : "string",
          "description" : "Unique payment profile ID",
          "maxLength" : 32
        },
        "card" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ProfileCards"
          }
        }
      }
    },
    "ProfileCards" : {
      "properties" : {
        "card_id" : {
          "type" : "string",
          "description" : "1-indexed card ID. Total number of cards allowed is configured in your merchant account."
        },
        "function" : {
          "type" : "string",
          "description" : "Will say DEF for the default card"
        },
        "number" : {
          "type" : "string",
          "description" : "Credit card number (PAN).",
          "maxLength" : 20,
          "default" : "5100000010001004"
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 17 for 2017.",
          "maxLength" : 2,
          "default" : "17"
        },
        "card_type" : {
          "type" : "string",
          "description" : "The type of card associated with the profile. AM: American Express, DI: Diners, JB: JCB, MC: MasterCard, NN: Discover, VI = Visa",
          "maxLength" : 2,
          "enum" : [ "AM", "DI", "JB", "MC", "NN'VI" ]
        }
      }
    },
    "CreateProfileBody" : {
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/ProfileFromCard"
        },
        "token" : {
          "$ref" : "#/definitions/ProfileFromToken"
        },
        "billing" : {
          "$ref" : "#/definitions/Address"
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        },
        "language" : {
          "type" : "string",
          "description" : "characters",
          "maxLength" : 3
        },
        "comment" : {
          "type" : "string",
          "description" : "Any comments that a user would like to attach to the creation of a Payment Profile",
          "maxLength" : 256
        }
      }
    },
    "UpdateProfileBody" : {
      "properties" : {
        "card" : {
          "$ref" : "#/definitions/ProfileToken"
        },
        "billing" : {
          "$ref" : "#/definitions/Address"
        },
        "custom" : {
          "$ref" : "#/definitions/Custom"
        },
        "language" : {
          "type" : "string",
          "description" : "characters",
          "maxLength" : 3
        },
        "comment" : {
          "type" : "string",
          "description" : "Any comments that a user would like to attach to the updating of a Payment Profile",
          "maxLength" : 256
        }
      }
    },
    "ProfileToken" : {
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of cardholder.",
          "maxLength" : 64
        },
        "code" : {
          "type" : "string",
          "description" : "single use token associated with this account.",
          "maxLength" : 36
        }
      }
    },
    "ProfileFromCard" : {
      "required" : [ "expiry_month", "expiry_year", "name", "number" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Card holder name.",
          "maxLength" : 64,
          "default" : "5100000010001004"
        },
        "number" : {
          "type" : "string",
          "description" : "Credit card number (PAN)",
          "maxLength" : 20
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 17 for 2017.",
          "maxLength" : 2,
          "default" : "17"
        },
        "cvd" : {
          "type" : "string",
          "description" : "Security code on the back of the credit card. This can be set to mandatory in the back office.",
          "maxLength" : 4,
          "default" : "123"
        }
      }
    },
    "ProfileFromToken" : {
      "required" : [ "code", "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Name of profile",
          "maxLength" : 64
        },
        "code" : {
          "type" : "string",
          "description" : "The token received from the client-side tokenization service.",
          "maxLength" : 64
        }
      }
    },
    "ProfileResponse" : {
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "integer"
        },
        "message" : {
          "type" : "string"
        },
        "customer_code" : {
          "type" : "string",
          "description" : "the ID of the payment profile. You need to keep track of this value."
        }
      }
    },
    "ProfileCardResponse" : {
      "properties" : {
        "code" : {
          "type" : "number",
          "format" : "integer"
        },
        "message" : {
          "type" : "string"
        },
        "customer_code" : {
          "type" : "string",
          "description" : "the ID of the payment profile. You need to keep track of this value."
        },
        "card" : {
          "$ref" : "#/definitions/ProfileCards"
        }
      }
    },
    "BeanstreamException" : {
      "properties" : {
        "code" : {
          "type" : "integer",
          "format" : "int32"
        },
        "category" : {
          "type" : "integer",
          "format" : "int32"
        },
        "message" : {
          "type" : "string"
        },
        "reference" : {
          "type" : "string"
        },
        "details" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Detail"
          }
        }
      }
    },
    "Detail" : {
      "properties" : {
        "field" : {
          "type" : "string"
        },
        "message" : {
          "type" : "string"
        }
      }
    },
    "TokenRequest" : {
      "required" : [ "cvd", "expiry_month", "expiry_year", "number" ],
      "properties" : {
        "number" : {
          "type" : "string",
          "description" : "The credit card number"
        },
        "expiry_month" : {
          "type" : "string",
          "description" : "eg. 02 for February.",
          "maxLength" : 2,
          "default" : "02"
        },
        "expiry_year" : {
          "type" : "string",
          "description" : "eg. 17 for 2017.",
          "maxLength" : 2,
          "default" : "17"
        },
        "cvd" : {
          "type" : "string",
          "description" : "Security code on the back of the credit card.",
          "maxLength" : 4,
          "default" : "123"
        }
      }
    },
    "TokenResponse" : {
      "required" : [ "token" ],
      "properties" : {
        "token" : {
          "type" : "string",
          "description" : "The token representing the credit card number that you will send to Beanstream for purchases. You will always receive a token, even if the request data is wrong or the card is invalid."
        },
        "code" : {
          "type" : "string",
          "description" : "Response code for the message. It can be ignored."
        },
        "version" : {
          "type" : "integer",
          "description" : "Message version number. Can be ignored."
        },
        "message" : {
          "type" : "string",
          "description" : "Response message with any hints as to what might have gone wrong, if something went wrong."
        }
      }
    },
    "CvdResult" : {
      "type" : "integer",
      "description" : "Result of CVD verification. 1=CVD Match, 2=CVD Mismatch, 3=CVD Not Verified, 4=CVD Should have been present, 5=CVD Issuer unable to process request, 6=CVD Not Provided"
    },
    "Level2" : {
      "required" : [ "customer_code", "order_tax1_price", "order_tax2_price" ],
      "properties" : {
        "customer_code" : {
          "type" : "string",
          "description" : "* Visa - Used by merchant to identify the purchase (i.e. SKU number).\n* Master Card - Code the cardholder supplied to the merchant.\n* American Express - Customer reference number.\n",
          "maxLength" : 17
        },
        "order_tax1_price" : {
          "type" : "number",
          "format" : "double",
          "description" : "* Visa - Amount of state or provincial tax included in the transaction amount - Must between 0.1% and 22% of the transaction amount.\n* Master Card - Sales tax/VAT on the total purchase - Must be between 0.1% and 30% of the transaction amount.\n* American Express - Transaction tax amount (calculated or entered).\n"
        },
        "order_tax2_price" : {
          "type" : "number",
          "format" : "double",
          "description" : "* Visa - Amount of state or provincial tax included in the transaction amount - Must between 0.1% and 22% of the transaction amount.\n* Master Card - Sales tax/VAT on the total purchase - Must be between 0.1% and 30% of the transaction amount.\n* American Express - Transaction tax amount (calculated or entered).\n"
        }
      }
    }
  }
}