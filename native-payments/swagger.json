{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Bambora Payments API",
        "description": "The Bambora Payments API makes it possible to perform payment-related operations such as authorizing and capturing payments.\n\nIn order to use this API you need to sign up with Bambora. Please send an email to sales.ecom@bambora.com if you want to sign up.\n\nNote that this API cannot be used for processing payments made through the Online Checkout. To handle online payments refer to the <a href=\"https:\/\/transaction-v1.api.epay.eu/help\">Online Payment API documentation</a>.",
        "contact": {
            "name": "native.support@bambora.com"
        },
        "termsOfService": ""
    },
    "schemes": [
        "https"
    ],
    "host": "api-beta.bambora.com",
    "basePath": "/payments",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json",
        "application/problem+json"
    ],
    "paths": {
        "/{payment}/": {
            "get": {
                "operationId": "query_payment",
                "summary": "Get payment",
                "description": "Query the payment service for information on this payment. Returns payment details and status.\n",
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "Merchant-specific identifier for the payment.",
                        "required": true,
                        "type": "string",
                        "maxLength": 2000
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "description": "Merchant identifier. Only neccessary if the merchant authentication token is for another merchant in the same corporate hierarchy. The service will validate that the merchant authentication token is authorized to perform the operation.\n",
                        "type": "string",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment found by query.\n",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Bad Request",
                                "detail": "'1111111111111...1' is too long",
                                "status": 400
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "404": {
                        "description": "No payment could be found.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_not_found",
                                "title": "Payment not found",
                                "detail": "No payment could be found, check that you used the correct payment identifier.\n",
                                "status": 404
                            }
                        }
                    },
                    "default": {
                        "description": "Query failed",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/encrypted_card_authorization/": {
            "post": {
                "operationId": "authorize_card_payment",
                "summary": "Make payment using encrypted credit card",
                "description": "Create a new authorized payment based on encrypted credit card details.\n",
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "Identifier for the payment. Must be unique for this merchant.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Encrypted card details",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CardAuthorization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful response - card registered. A recurring payment has been set up.\n",
                        "schema": {
                            "$ref": "#/definitions/CardPaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Bad Request",
                                "detail": "'amount' is a required property",
                                "status": 400
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "402": {
                        "description": "Cannot authorize.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/cannot_authorize",
                                "title": "Cannot authorize",
                                "detail": "",
                                "status": 402
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "409": {
                        "description": "Payment operation blocked.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_operation_blocked",
                                "title": "Payment operation blocked",
                                "detail": "The payment was being modified by another request. The attempted operation could be retried again, or the payment could be queried to find out if its properties have changed.\n",
                                "status": 409
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid payment state transition.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/invalid_payment_state_transition",
                                "title": "Invalid payment state transition",
                                "detail": "The operation 'Refund' is not allowed when the payment is in state 'Authorized'\n",
                                "status": 422
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/card_token_authorization/": {
            "post": {
                "operationId": "authorize_token_payment",
                "summary": "Make payment using credit card token",
                "description": "Create a new authorized payment based on a credit card token.\n",
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "Identifier for the payment. Must be unique for this merchant.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Payment details",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenAuthorization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful response - payment created. The amount specified has been approved.\n",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Bad Request",
                                "detail": "'amount' is a required property",
                                "status": 400
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "402": {
                        "description": "Cannot authorize.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/cannot_authorize",
                                "title": "Cannot authorize",
                                "detail": "",
                                "status": 402
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "409": {
                        "description": "Payment operation blocked.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_operation_blocked",
                                "title": "Payment operation blocked",
                                "detail": "The payment was being modified by another request. The attempted operation could be retried again, or the payment could be queried to find out if its properties have changed.\n",
                                "status": 409
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid payment state transition.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/invalid_payment_state_transition",
                                "title": "Invalid payment state transition",
                                "detail": "The operation 'Refund' is not allowed when the payment is in state 'Authorized'\n",
                                "status": 422
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error or card declined. A 402 status code is a declined card of failed payment.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/capture/": {
            "post": {
                "operationId": "capture_payment",
                "tags": [
                    "payments"
                ],
                "summary": "Capture payment",
                "description": "The capture operation withdraws the authorized amount, either in whole or in part. For example: If a debit card was used for the purchase, then money is withdrawn from the customer's bank account.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "The payment id of the pre-auth that will be captured.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Capture details",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Capture"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful capture.",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Bad Request",
                                "detail": "'amount' is a required property",
                                "status": 400
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "402": {
                        "description": "Cannot capture.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/cannot_capture",
                                "title": "Cannot capture",
                                "detail": "",
                                "status": 402
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "409": {
                        "description": "Payment operation blocked.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_operation_blocked",
                                "title": "Payment operation blocked",
                                "detail": "The payment was being modified by another request. The attempted operation could be retried again, or the payment could be queried to find out if its properties have changed.\n",
                                "status": 409
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid payment state transition.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/invalid_payment_state_transition",
                                "title": "Invalid payment state transition",
                                "detail": "",
                                "status": 422
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/cancel/": {
            "post": {
                "operationId": "cancel_payment",
                "tags": [
                    "payments"
                ],
                "summary": "Cancel payment",
                "description": "The Cancel operation interrupts a transaction before the authorized amount has been collected.\nThe Cancel operation can only be used on payments that have the Authorized status.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "The payment id of the pre-auth that will be captured.",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful cancel.",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "402": {
                        "description": "Cannot cancel.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/cannot_cancel",
                                "title": "Cannot cancel",
                                "detail": "",
                                "status": 402
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "409": {
                        "description": "Payment operation blocked.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_operation_blocked",
                                "title": "Payment operation blocked",
                                "detail": "The payment was being modified by another request. The attempted operation could be retried again, or the payment could be queried to find out if its properties have changed.\n",
                                "status": 409
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid payment state transition.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/invalid_payment_state_transition",
                                "title": "Invalid payment state transition",
                                "detail": "",
                                "status": 422
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/refund/": {
            "post": {
                "operationId": "refund_payment",
                "tags": [
                    "payments"
                ],
                "summary": "Refund payment",
                "description": "The Refund operation will return the captured amount, in part or in full, to the customer. Only captured payments can be refunded.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "The payment id of the payment that will be refunded.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Refund details",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Refund"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful refund.",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Bad Request",
                                "detail": "'amount' is a required property",
                                "status": 400
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Cannot authorize",
                                "detail": "The Authorization header was not set.",
                                "status": 401
                            }
                        }
                    },
                    "402": {
                        "description": "Cannot refund.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/cannot_refund",
                                "title": "Cannot refund",
                                "detail": "",
                                "status": 402
                            }
                        }
                    },
                    "403": {
                        "description": "Forbidden.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "about:blank",
                                "title": "Forbidden.",
                                "detail": "You are not authorized for this operation with the authentication you have provided.\n",
                                "status": 403
                            }
                        }
                    },
                    "409": {
                        "description": "Payment operation blocked.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/payment_operation_blocked",
                                "title": "Payment operation blocked",
                                "detail": "The payment was being modified by another request. The attempted operation could be retried again, or the payment could be queried to find out if its properties have changed.\n",
                                "status": 409
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid payment state transition.",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        },
                        "examples": {
                            "application/json": {
                                "type": "http://api.bambora.com/definitions/payments/invalid_payment_state_transition",
                                "title": "Invalid payment state transition",
                                "detail": "",
                                "status": 422
                            }
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "The type of the error. This is what you should match against when implementing error handling. It is in the form of a URL which also leads to a more detailed description of the error.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The human-readable version of the error."
                },
                "detail": {
                    "type": "string",
                    "description": "Any relevant details about the error. May include suggestions for handling it. Can be an empty string if no extra details are available.\n"
                },
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The HTTP status code of this error response. Included to aid\nthose frameworks that have a hard time working with anything\nother than the body of an HTTP response.\n\n400 indicates an invalid request, usually an incorrectly\nformatted request from the client.\n\n401 is an authentication exception, no auth supplied.\n\n402 is a declined payment. The message content was correct,\nhowever.\n\n403 is an authentication (e.g. wrong API key) or\nauthorization exception (e.g. operation not permitted)\n\n404 occurs when a resource cannot be found.\n\n415 incorrect media type supplied in the request.\n\n500 internal server error. These are rare.\n"
                }
            },
            "required": [
                "type",
                "title",
                "detail",
                "status"
            ]
        },
        "CardAuthorization": {
            "type": "object",
            "required": [
                "currency",
                "amount",
                "encryptedCard",
                "encryptedSessionKeys",
                "token"
            ],
            "properties": {
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "pattern": "^[A-Z]{3}$"
                },
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "merchant": {
                    "type": "string",
                    "description": "Merchant identifier. Only neccessary if the merchant authentication token is for another merchant in the same corporate hierarchy. The service will validate that the merchant authentication token is authorized to perform the operation.\n"
                },
                "encryptedSessionKeys": {
                    "type": "array",
                    "minItems": 1,
                    "description": "An array containing details about an encrypted session key.\n",
                    "items": {
                        "type": "object",
                        "description": "Encrypted session key details\n",
                        "properties": {
                            "fingerprint": {
                                "type": "string",
                                "description": "The SHA-1 fingerprint of the certificate used for encrypting the session key.\n"
                            },
                            "sessionKey": {
                                "type": "string",
                                "description": "The base64 encoded encrypted session key.\n"
                            }
                        }
                    }
                },
                "encryptedCard": {
                    "type": "object",
                    "required": [
                        "cardNumber",
                        "cvcCode",
                        "expiryMonth",
                        "expiryYear"
                    ],
                    "properties": {
                        "cardNumber": {
                            "type": "string",
                            "description": "A base64 encoded string containing a card number encrypted with the session key.\n"
                        },
                        "cvcCode": {
                            "type": "string",
                            "description": "A base64 encoded string containing a cvc code encrypted with the session key.\n"
                        },
                        "expiryMonth": {
                            "type": "string",
                            "description": "A base64 encoded string containing the expiry month encrypted with the session key.\n"
                        },
                        "expiryYear": {
                            "type": "string",
                            "description": "A base64 encoded string containing the expiry year encrypted with the session key.\n"
                        }
                    }
                },
                "token": {
                    "type": "boolean",
                    "description": "A boolean specifying whether to return a card token that can be used to authorize further payments for the merchant without having to send the card details again.\n"
                }
            }
        },
        "TokenAuthorization": {
            "type": "object",
            "required": [
                "currency",
                "amount",
                "token"
            ],
            "properties": {
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "pattern": "^[A-Z]{3}$"
                },
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "token": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "merchant": {
                    "type": "string",
                    "description": "Merchant identifier. Only neccessary if the merchant authentication token is for another merchant in the same corporate hierarchy. The service will validate that the merchant authentication token is authorized to perform the operation.\n"
                }
            }
        },
        "Capture": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Amount to capture, in cents (or equivalent). If this is less than the amount of the payment, a partial capture will be performed. If this parameter is omitted, the entire amount of the payment will be captured.\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                }
            },
            "required": [
                "amount"
            ],
            "example": {
                "amount": 1000,
                "comment": "10 EUR capture"
            }
        },
        "Refund": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 1,
                    "description": "Amount to refund, in cents (or equivalent). If this is less than the amount of the payment, a partial refund will be performed. If this parameter is omitted, the entire amount of the payment will be refunded.\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                }
            },
            "example": {
                "amount": 1000,
                "comment": "10 EUR refund"
            }
        },
        "PaymentResponse": {
            "type": "object",
            "required": [
                "payment",
                "state"
            ],
            "properties": {
                "region": {
                    "type": "string",
                    "description": "Geographical region of the merchant. Will be the same as the sub-domain of the request.\n",
                    "enum": [
                        "emea_0",
                        "apac_0",
                        "amer_0"
                    ]
                },
                "merchant": {
                    "type": "string",
                    "description": "Identifier of the merchant. Retrieved during onboarding. Will be the same as the host of the request.\n"
                },
                "payment": {
                    "type": "string",
                    "description": "Merchant-specific identifier for the payment.",
                    "maxLength": 2000
                },
                "state": {
                    "type": "string",
                    "description": "Set by the system when sent for processing.",
                    "enum": [
                        "None",
                        "Authorized",
                        "Authorization Expired",
                        "Declined",
                        "Voided",
                        "Captured",
                        "Refunded",
                        "Settled",
                        "Canceled"
                    ]
                },
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, DKK, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "pattern": "^[A-Z]{3}$"
                },
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "captures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Capture"
                    }
                }
            }
        },
        "CardPaymentResponse": {
            "type": "object",
            "required": [
                "payment",
                "state"
            ],
            "properties": {
                "region": {
                    "type": "string",
                    "description": "Geographical region of the merchant. Will be the same as the sub-domain of the request.\n",
                    "enum": [
                        "emea_0",
                        "apac_0",
                        "amer_0"
                    ]
                },
                "merchant": {
                    "type": "string",
                    "description": "Identifier of the merchant. Retrieved during onboarding. Will be the same as the host of the request.\n"
                },
                "payment": {
                    "type": "string",
                    "description": "Merchant-specific identifier for the payment.",
                    "maxLength": 2000
                },
                "state": {
                    "type": "string",
                    "description": "Set by the system when sent for processing.",
                    "enum": [
                        "None",
                        "Authorized",
                        "Authorization Expired",
                        "Declined",
                        "Voided",
                        "Captured",
                        "Refunded",
                        "Settled"
                    ]
                },
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, DKK, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "pattern": "^[A-Z]{3}$"
                },
                "amount": {
                    "type": "integer",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "captures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Capture"
                    }
                },
                "card": {
                    "type": "object",
                    "properties": {
                        "token": {
                            "type": "string",
                            "description": "The card token created.\n"
                        },
                        "cardNumber": {
                            "type": "string",
                            "description": "The first 6 and last 4 numbers of the credit card registered.\n"
                        },
                        "cardType": {
                            "type": "string",
                            "description": "Values of: VISA, MASTERCARD, OTHER\n",
                            "enum": [
                                "VISA",
                                "MASTERCARD",
                                "OTHER"
                            ]
                        },
                        "expiryMonth": {
                            "type": "integer",
                            "description": "The expiry month of the credit card registered.\n"
                        },
                        "expiryYear": {
                            "type": "integer",
                            "description": "The expiry year of the credit card registered.\n"
                        }
                    }
                }
            }
        }
    }
}
